:- encoding(utf8).
:- use_module(library(clpfd)).

% Преобразование слова в число по правилам: [К, О, Т] => 100*К + 10*О + Т
буквы_в_число([], [], 0).
буквы_в_число([Б|Буквы], [Цифра|Цифры], Число) :-
    буквы_в_число(Буквы, Цифры, Ост),
    length([Б|Буквы], Длина),
    Степень is 10^(Длина - 1),
    Число #= Цифра * Степень + Ост.

% Основное криптарифметическое уравнение: КОТ + ПЁС = ДРУГ
решить_пример(Буквы) :-
    format("Начинаем поиск решения...\n"),
    
    % Инициализация переменных
    Буквы = [К, О, Т, П, Ё, С, Д, Р, У, Г],
    Буквы ins 0..9,
    format("Установлены домены переменных: ~w\n", [Буквы]),
    
    % Ограничение уникальности
    all_different(Буквы),
    format("Установлено ограничение уникальности\n"),
    
    % Ограничение первых цифр
    К #\= 0, П #\= 0, Д #\= 0,
    format("Установлены ограничения на первые цифры: К=~w, П=~w, Д=~w\n", [К, П, Д]),
    
    % Формирование чисел с помощью буквы_в_число
    буквы_в_число([К, О, Т], [К, О, Т], КОТ),
    буквы_в_число([П, Ё, С], [П, Ё, С], ПЁС),
    буквы_в_число([Д, Р, У, Г], [Д, Р, У, Г], ДРУГ),
    format("Сформированы числа: КОТ=~w, ПЁС=~w, ДРУГ=~w\n", [КОТ, ПЁС, ДРУГ]),
    
    % Базовые ограничения на числа
    КОТ #>= 100, КОТ #< 1000,
    ПЁС #>= 100, ПЁС #< 1000,
    ДРУГ #>= 1000, ДРУГ #< 10000,
    format("Установлены ограничения на числа\n"),
    
    % Основное уравнение
    КОТ + ПЁС #= ДРУГ,
    format("Установлено основное уравнение\n"),
    
    % Поиск решения с использованием first-fail стратегии
    format("Начинаем перебор значений...\n"),
    labeling([ff], Буквы),
    
    % Вывод решения
    format("\nНайдено решение:\n"),
    format("КОТ = ~d, ПЁС = ~d, ДРУГ = ~d\n", [КОТ, ПЁС, ДРУГ]),
    format("Буквы:\n  К=~d, О=~d, Т=~d, П=~d, Ё=~d, С=~d, Д=~d, Р=~d, У=~d, Г=~d\n",
        [К, О, Т, П, Ё, С, Д, Р, У, Г]).

% Маска, где 1 — показать букву, 0 — скрыть
маска([1,0,1,  1,0,1,  1,0,0,0]).

% Применение маски к списку значений с отслеживанием видимых и скрытых значений
применить_маску([], [], [], []).
применить_маску([Б|Бс], [М|Мс], [Видно|ВиднСл], [Б|Ост]) :- М =:= 1, !,
    Видно = Б,
    применить_маску(Бс, Мс, ВиднСл, Ост).
применить_маску([_|Бс], [0|Мс], ['_'|ВиднСл], Ост) :-
    применить_маску(Бс, Мс, ВиднСл, Ост).

% Печать маскированных значений
написать_буквы([], []).
написать_буквы([Б|Бс], [Ц|Цс]) :-
    format("~w = ~w\n", [Б, Ц]),
    написать_буквы(Бс, Цс).

% Повторное решение с подсказками
решить_с_подсказками(Маска, Значения) :-
    Буквы = [К, О, Т, П, Ё, С, Д, Р, У, Г],
    Буквы ins 0..9,
    all_different(Буквы),
    К #\= 0, П #\= 0, Д #\= 0,

    буквы_в_число([К, О, Т], [К, О, Т], КОТ),
    буквы_в_число([П, Ё, С], [П, Ё, С], ПЁС),
    буквы_в_число([Д, Р, У, Г], [Д, Р, У, Г], ДРУГ),
    КОТ + ПЁС #= ДРУГ,

    применить_подсказки(Буквы, Маска, Значения),

    labeling([ff], Буквы),
    format("\nВосстановленное решение:\n"),
    format("КОТ = ~d, ПЁС = ~d, ДРУГ = ~d\n", [КОТ, ПЁС, ДРУГ]),
    format("Буквы: К=~d О=~d Т=~d П=~d Ё=~d С=~d Д=~d Р=~d У=~d Г=~d\n",
        [К, О, Т, П, Ё, С, Д, Р, У, Г]).

% Применение известных значений к переменным
применить_подсказки([], [], []).
применить_подсказки([Б|Бс], [1|Мс], [Б|Зс]) :-
    применить_подсказки(Бс, Мс, Зс).
применить_подсказки([_|Бс], [0|Мс], [_|Зс]) :-
    применить_подсказки(Бс, Мс, Зс).

% Главный предикат
запустить_решатель :-
    format("Запуск решателя...\n"),
    
    % Получаем решение
    catch(
        решить_пример(Буквы),
        Error,
        (format("Ошибка при поиске решения: ~w\n", [Error]), fail)
    ),

    format("\nПрименяем маску...\n"),
    
    % Применяем маску к решению
    маска(Маска),
    применить_маску(Буквы, Маска, Скрытые, _),
    
    format("\nЧастично известные буквы:\n"),
    написать_буквы(['К','О','Т','П','Ё','С','Д','Р','У','Г'], Скрытые),

    % Решаем заново с теми же ограничениями, но частью переменных известны
    решить_с_подсказками(Маска, Скрытые).

% Запуск автоматически
:- initialization(запустить_решатель, main).
